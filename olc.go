package main

import (
	"flag"
	"fmt"
	"log"
	"strings"
	"github.com/google/open-location-code/go"
	"os/exec"
	"strconv"
)

var codes = []string {
"73H475X2+",
"73H48562+",
"73H4849Q+",
"73H485H2+",
"76QXMMJ5+",
"76QXQQQR+",
"76RX2M6Q+",
"76RX3JHR+",
"76RX4PCQ+",
"76RX7VXH+",
"76RXGW6J+",
"76RXHWX5+",
"76RXJVCC+",
"76RXPXJ2+",
"76V4QHJR+",
"76VVX622+",
"76WV3H6H+",
"76WW329X+",
"76WV3HHH+",
"76WWHJ9H+",
"76X78669+",
"76X3GC6J+",
"76X6H9XH+",
"76X3JGC9+",
"76X3JGC6+",
"76X6PH6X+",
"76X6QR96+",
"76XFWWJ5+",
"76XFXR6X+",
"76X6XF92+",
"86273V9C+",
"86296X2J+",
"862W7H66+",
"862477X6+",
"862W8866+",
"862487R2+",
"862C9WR5+",
"862JM45H+",
"854F62H2+",
"854C8X9Q+",
"8544QR2R+",
"8544QXCJ+",
"8742Q2QX+",
"8645R565+",
"8742R49R+",
"8544VQH9+",
"8544WQ26+",
"865525J2+",
"865J6F69+",
"855C74QH+",
"865M92C6+",
"855C97HJ+",
"855C94RC+",
"865QC62J+",
"855CC75X+",
"8559FW6Q+",
"865MG522+",
"855WH39X+",
"855WH39R+",
"8554J3C9+",
"8554J3H9+",
"8554M2J6+",
"8554P369+",
"8554P399+",
"8554Q4JR+",
"8554Q4Q5+",
"865QQMQJ+",
"8553QWXJ+",
"865QQHXR+",
"8553RJXC+",
"865QV95R+",
"8554V3R9+",
"865QWM52+",
"8553XHH6+",
"865RXHRH+",
"866P2252+",
"85632GJ9+",
"85633Q6R+",
"85633P65+",
"85633X99+",
"85633V9H+",
"85633J95+",
"856437H6+",
"85633JHC+",
"856439XC+",
"85644PH5+",
"856444HH+",
"856442HJ+",
"85635525+",
"8563692C+",
"85627QJ2+",
"85638GHX+",
"8562C7JR+",
"8669PJRH+",
"8669QM2J+",
"856CV55J+",
"866WX396+",
"867P2PQJ+",
"867G27XJ+",
"867G34XR+",
"867G44HR+",
"847X7925+",
"867V8G96+",
"867XC45R+",
"867VHFH2+",
"8774HHXX+",
"8774JH5X+",
"867HM5J2+",
"867RW2QX+",
"867XXX6Q+",
"87832356+",
"868624XR+",
"878235HC+",
"868635R5+",
"86874R5R+",
"868JHP95+",
"868VHQX9+",
"8785QWJ2+",
"8582R7R2+",
"8785RPR2+",
"8785VQHX+",
"869M2H29+",
"87953GH6+",
"87957756+",
"869X7X59+",
"849V9WHJ+",
"849VCRQ9+",
"849XG555+",
"8794GHQ9+",
"8794HFXJ+",
"8694PM2C+",
"849VQHXR+",
"869WQQX9+",
"859XX49H+",
"869JXHH6+",
"86CQ2FCQ+",
"87C47G26+",
"86CVCH59+",
"84CWHG2X+",
"84CWHG9J+",
"86CFJPQQ+",
"86CFJGQX+",
"86CFP9RH+",
"84CWQQC2+",
"87C5QXC2+",
"87C4QGC6+",
"87C4VQ66+",
"85CQV5CJ+",
"87C5V2Q6+",
"87C4WX2Q+",
"87C4WW5C+",
"86C9WMXQ+",
"87C4XW65+",
"86F729J5+",
"86FM5C5Q+",
"87F57FQ2+",
"87F58C25+",
"87F58GX9+",
"87F4CHJH+",
"86FXFRHH+",
"87F4J8Q6+",
"86FQMV2R+",
"85FQM2CJ+",
"87F6M8QH+",
"86FQMRX6+",
"85FQP5R5+",
"86FMQRJ9+",
"86FGQ7QR+",
"86FGR86X+",
"87F7V3C6+",
"86FMWX25+",
"86FMWR56+",
"87F5W7CJ+",
"87F6WRXX+",
"87F6WRX6+",
"87F6WRX6+",
"86GR2X2J+",
"87G62MCJ+",
"87G63W95+",
"87G53J9R+",
"86GH4QC6+",
"87G74WHJ+",
"87G65M25+",
"87G65V5C+",
"87G55RXH+",
"87G76399+",
"87G562HX+",
"85GC782H+",
"87G57859+",
"87G28399+",
"87G683H6+",
"87G58HRH+",
"87G798CX+",
"87G69MCC+",
"86GMC4CH+",
"87G2F366+",
"87G2F262+",
"87G6HF9J+",
"86GPH899+",
"87G7HWH5+",
"87G7JXHQ+",
"87G7JCQC+",
"87G8M359+",
"87G8M9QC+",
"86GXMPX2+",
"87G8P6H5+",
"87G8P2R9+",
"87G8P2R2+",
"87G8Q425+",
"87G8Q22J+",
"87G8Q229+",
"87G8Q229+",
"87G8Q856+",
"87G8Q55C+",
"87G8Q25R+",
"85GCQ5CC+",
"87G8Q2CR+",
"87G7QGJJ+",
"87G8Q3Q6+",
"87G8Q2QX+",
"87G8R9RR+",
"87G8R3R6+",
"87G8V4HC+",
"87G8W22J+",
"87G7X99C+",
"87G5X99R+",
"86GXX9R5+",
"87H82856+",
"87H827J6+",
"87H84HCH+",
"86H54XQ5+",
"85HC52CJ+",
"86H662RJ+",
"87H67455+",
"87H88Q29+",
"87H993CR+",
"87H8CG5X+",
"86HWC3Q6+",
"86HFFF99+",
"86HWG92H+",
"86HWG95R+",
"86HPH56C+",
"86H8H9RC+",
"86HCMF59+",
"86HCMF52+",
"87H9Q829+",
"86HHQR5X+",
"87H9QFJ9+",
"86HJQCQ2+",
"87HCRHXX+",
"86HJV565+",
"86HJV8CH+",
"86HJV9HC+",
"86HJV9QH+",
"86HJX8H6+",
"86JH2X2J+",
"86J829JR+",
"86JJ3296+",
"86JX3VX5+",
"87J94CC5+",
"87J87629+",
"86JJ742H+",
"86JR78CX+",
"86JR77J9+",
"84JV859C+",
"87JC8WRC+",
"87JC8VRR+",
"86JR8WXQ+",
"87JC9W6J+",
"87JC9W6J+",
"87JC9W62+",
"87JC9WC2+",
"86JR9WC5+",
"86JRFWR5+",
"87JCH2R6+",
"87JCH5XQ+",
"86JRHPXJ+",
"85JMRQR9+",
"86J4VHHR+",
"86JJX26J+",
"86JJX2RX+",
"86MH2Q56+",
"86MH2XQJ+",
"86MG3HH9+",
"86MG3FHJ+",
"87M43CR2+",
"87M449CC+",
"86MF8JRC+",
"86M5G7JR+",
"86MJQ756+",
"86MJQ752+",
"85MCR6HJ+",
"86P92GCJ+",
"85PR3Q69+",
"86PH7JJ5+",
"86PHGWJJ+",
"84PRHQX2+",
"87PHR762+",
"86P8VQ62+",
"86P8VMHC+",
"86P8WMJ2+",
"86P8XP6Q+",
"86Q83G9X+",
"86QQ92CJ+",
"84QVG9JR+",
"85QHQFQQ+",
"84RXJC6Q+",
"84VV7G2X+",
"84VVCQQR+",
"84VVH9HC+",
"84VVJM6J+",
"84VVJMHC+",
"85V5M6Q5+",
"86V4WW5J+",
}


var open = flag.String("open", "", "open google maps")
var decode = flag.String("decode", "", "decode OLC")
var encode = flag.String("encode", "", "encode lat,lon")
var all = flag.Bool("all", false, "decode to rect(lat,lon,code)")

func olc2latlon(code string) {
	area, err := olc.Decode(code)
	if err != nil {
		log.Panicf("%q: %v", code, err)
	}
	fmt.Printf("area: lo: %3.6f, %3.6f\n", area.LatLo, area.LngLo)
	fmt.Printf("area: hi: %3.6f, %3.6f\n", area.LatHi, area.LngHi)
}

func latlon2olc(latlon string) {
	pair := strings.Split(latlon, ",")
	lat, err := strconv.ParseFloat(pair[0], 64)
	if err != nil {
		panic(err)
	}
	lon, err := strconv.ParseFloat(pair[1], 64)
	if err != nil {
		panic(err)
	}

	code := olc.Encode(lat, lon, 10)
	fmt.Printf("code: %s\n", code)
}

func main() {
	flag.Parse()

	if *decode != "" {
		olc2latlon(*decode)
		return
	}

	if *encode != "" {
		latlon2olc(*encode)
		return
	}
	
	if *open != "" {
		olc2latlon(*open)
		code := strings.Replace(*open, "+", "%2B", 1)
		link := fmt.Sprintf("https://www.google.com/maps/search/%s", code)
		fmt.Println(link)
		exec.Command("open", link).Run()
	}
	
	if *all {
		for _, code := range codes {
			area, err := olc.Decode(code)
			if err != nil {
				log.Panicf("%q: %v", code, err)
			}
			fmt.Printf("rect(%f, %f, \"%s\");\n", area.LatLo, area.LngLo, code)
		}
	}
}
